" General
filetype plugin on
filetype indent on
set autoread
let mapleader = " "
set clipboard=unnamedplus
set runtimepath^=~/notes
set spelllang=ru_yo,en_us

" UI
syntax on
set ruler
set backspace=eol,start,indent
set ignorecase
set smartcase
set incsearch
set lazyredraw
set nohlsearch
set magic
set showmatch
set foldcolumn=1
set number
set relativenumber
set completeopt=longest,menuone,preview
set previewheight=10
set laststatus=2

" Включаем 256 цветов в терминале, мы ведь работаем из иксов?
" Нужно во многих терминалах, например в gnome-terminal
set t_Co=256

if &term =~ '256color'
    set t_ut=
endif

" Files, backups and undo
set nobackup
set nowb
set noswapfile
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

" Text/Indent
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set ai
set si
set nowrap


" Quick fix
map <C-j> :cn<CR>
map <C-k> :cp<CR>

" Navigate by tabs
nnoremap <C-l> gt
nnoremap <C-h> gT 



" Vim Plug
call plug#begin('~/.vim/plugged')
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'flazz/vim-colorschemes'
    Plug 'w0rp/ale'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'OmniSharp/omnisharp-vim'
    Plug 'tpope/vim-fugitive'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'preservim/nerdtree'
 "   Plug 'dracula/vim', { 'as' : 'dracula' }
    Plug 'ntpeters/vim-better-whitespace'
    Plug 'puremourning/vimspector'
call plug#end()
set guifont=Monaco:h18
colorscheme codedark


" Vimspector
let g:vimspector_enable_mappings = 'VISUAL_STUDIO'

" Asyncomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" ALE
let g:ale_linters = { 'cs' : ['OmniSharp'] }
let g:ale_sign_column_always = 1
let g:ale_virtualtext_cursor = 1
let g:ale_echo_cursor = 0
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'

" FZF
nmap <C><Tab> <Plug>(fzf-maps-n)
nmap <C-p> :Files<CR>

" NerdTree
nnoremap <C-o> :NERDTreeToggle<CR>
let g:NERDTreeIgnore = ['bin', 'obj']
let g:NERDTreeQuitOnOpen = 1
let NERDTreeMapOpenInTab='<TAB>'
let NERDTreeMapOpenInTabSilent='<C-g>'

" OmniSharp
let g:OmniSharp_timeout = 5
let g:omnicomplete_fetch_full_documentation = 1
let g:OmniSharp_autoselect_existing_sln = 1
let g:OmniSharp_sln_path = '~/ASTEP_Source/0_Dev/Trunk/ASTEP.Service/Astep.Service.Core'
let g:OmniSharp_sln_list_name = '~/ASTEP_Source/0_Dev/Trunk/ASTEP.Service/Astep.Service.Core/ASTEP.Calculate.Service.sln'
let g:OmniSharp_popup_position = 'peek'
let g:OmniSharp_highlighting = 3
let g:OmniSharp_diagnostic_exclude_paths = [ 'Temp\\', 'obj\\', '\.nuget\\']
"let g:OmniSharp_selector_ui = 'fzf'
"let g:OmniSharp_selector_findusages = 'fzf'
let g:OmniSharp_fzf_options = { 'down': '10' }
let g:OmniSharp_server_type = 'roslyn'
let g:OmniSharp_prefer_global_sln = 1
"let g:OmniSharp_server_use_mono = 1
" Use the stdio version of OmniSharp-roslyn - this is the default
let g:OmniSharp_server_stdio = 1


augroup csharp_commands
    autocmd!
    autocmd FileType cs nmap <buffer> <C-G> <Plug>(omnisharp_go_to_definition)
    autocmd FileType cs nmap <buffer> <C><Space> <Plug>(omnisharp_code_actions)
    autocmd FileType cs nmap <buffer> <F2> <Plug>(omnisharp_rename)
    autocmd FileType cs nmap <buffer> <C-c>f <Plug>(omnisharp_code_format)
    autocmd FileType cs nmap <buffer> <C-g> <Plug>(omnisharp_find_implementations)
    autocmd FileType cs nmap <buffer> <C-f> <Plug>(omnisharp_find_symbol)
    autocmd FileType cs nmap <buffer> <C-F> <Plug>(omnisharp_find_usages)
    autocmd FileType cs nmap <buffer> <C-d> <Plug>(omnisharp_documentation)
    autocmd FileType cs nmap <buffer> <C-c>c <Plug>(omnisharp_global_code_check)
    autocmd FileType cs nmap <buffer> <C-r>t <Plug>(omnisharp_run_test)
    autocmd FileType cs nmap <buffer> <C-r>T <Plug>(omnisharp_run_tests_in_file)
    autocmd FileType cs nmap <buffer> <C-s> <Plug>(omnisharp_start_server)
    autocmd FileType cs nmap <buffer> <C-S> <Plug>(omnisharp_stop_server)
    autocmd FileType cs nmap <buffer> <C-\> <Plug>(omnisharp_signature_help)
    autocmd FileType cs imap <buffer> <C-\> <Plug>(omnisharp_signature_help)
    autocmd BufWritePre *.cs :OmniSharpCodeFormat

    " vim-better-whitespace
    autocmd FileType cs let g:strip_whitespace_on_save = 1
    autocmd FileType cs let g:strip_whitespace_confirm = 0
augroup END
